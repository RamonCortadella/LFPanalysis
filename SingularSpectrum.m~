function out = SingularSpectrum(InputPath,OutputPath,T,indDB,extension,varargin)
%This function takes the ICA results as input to determine events related
%to individual components and look for non-stationary sources related to
%such events

[BrainState, FreqBandsIC, FreqBandsSPA, SPACoupling,Twindow,TimeScaleGlue] = DefaultArgs(varargin,{'PerSWS',{'delta'},{'delta'},'.DC',0.3,0.2}); %'isa','delta','theta','spindle','beta','lowgamma','highgamma'
nCh = T.NumCh(indDB);
nRows = T.nRows(indDB);
nCols = T.nCols(indDB);
Fs = T.Fs(indDB);

load(InputPath,'out')
fB.isa = [0.02 0.5];
fB.delta = [0.5 5];
fB.theta = [5 9];
fB.spindle = [9 20];
fB.beta = [20 30];
fB.lowgamma = [30 50];
fB.highgamma = [50 100];

display(fieldnames(out))

% The coupling of the data in the DB search, that must match that in
% InputPath is used to compute the Coupling. If it is AC coupled the Fs is
% corrected as in the ICA computation

if T.CoupledAC(indDB) == 1 & T.CoupledDC(indDB) ==0
    Coupling ='.AC';
elseif T.CoupledAC(indDB) == 0 & T.CoupledDC(indDB) ==1
    Coupling ='.DC';
else
    Coupling ='';
end

if strcmp(Coupling, '.AC') | strcmp(Coupling, '')
    if T.depth(indDB) == 1 & T.SingleShank(indDB) == 0
        DownFact = 6;
    elseif T.depth(indDB)==0 
        DownFact = 3;
    end
    Fs = Fs/DownFact;

end

%indicate a single frequency band that defines the IC used for the
%triggered average
A = out.(FreqBandsIC{1}).A;
display(length(A(1,:)),'Index of IC in the displayed computation: CHECK FOR INCONSISTENCIES!!!')

%display components map
[bX, bY]= meshgrid([1:nCols]',[1:nRows]');
v = reshape(bX,[],1);
w = reshape(bY,[],1);
figure()
title(FreqBandsIC{1})
NumICs = length(A(1,:));
for i = 1:NumICs
    subplot(floor(sqrt(NumICs))+1,floor(sqrt(NumICs))+1,i)
    F=  scatteredInterpolant(v,w,A(:,i));
    bF = F(bX,bY);
    imagesc(bF)
    colorbar

    title(['index=' num2str(i)])
end


InputPathState = '/storage2/ramon/data/DB/Files/';
Lfp=[];
val = out.val;
if strcmp(Coupling,'.DC') & strcmp(SPACoupling,'.AC')
   FsSPA = T.Fs(indDB-1);
else
   FsSPA = T.Fs(indDB);
end
SelectedPeriods = [];
for i = 1:length(val)

    Tend = 0;
    if contains(extension,'interp') %force use of interpolated files
        dn = split(val{1},'-');
        Device = [dn{1} '-' dn{2}];
        if contains(T.FileName(indDB),'ECoG')
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} '.ECoG' SPACoupling extension];
        elseif  contains(T.FileName(indDB),'Depth')
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} '.Depth' SPACoupling extension];
        else
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} SPACoupling extension];
        end

        display(FileName, 'loading file for Lfp concatenation across recordings')
        LfpT = LoadBinaryDAT(FileName, [0:nCh-1], nCh,1)';
        LfpT = ButFilter(LfpT,2,fB.(FreqBandsSPA{1})/(FsSPA)*2,'bandpass');
            
        szLfp = size(Lfp);
        Tend = szLfp(1)/FsSPA;

        Lfp = [Lfp; LfpT];

        if BrainState
            display(indDB)
            display(T.RecordingId{indDB})

            display(strcat(InputPathState,Device,'/',val{i},'/States/',val{i},'.PerStates.mat'))

            PerStates = load(strcat(InputPathState,Device,'/',val{i},'/States/',val{i} ,'.PerStates.mat'));
            SelectedPeriodsTemp = PerStates.PerStates.(BrainState);
            DurationStates = SelectedPeriodsTemp(:,2)-SelectedPeriodsTemp(:,1);
            SelectedPeriodsTemp = SelectedPeriodsTemp(find(DurationStates >=out.MinDurationStates),:); 
            SelectedPeriodsTemp = SelectedPeriodsTemp + Tend;

            SelectedPeriods = [SelectedPeriods; SelectedPeriodsTemp];
%             DurationStates = DurationStates(find(DurationStates >=MinDurationStates));
        end
    else
        display('ATTENTION! : Extension must contain "interp" processing step for comparable recordings!!!!! This process will crash in 100s')
        pause(100)
        break
    end
end


LfpState = [];
%concatenate Lfp for selected periods using a zeroing
for i = 1:length(SelectedPeriods(:,1))
    display(size(Lfp),'size Lfp')
    display(floor(Fs*SelectedPeriods(i,:)), 'min and max samp Period')
    LfpStateTemp = Lfp(floor(Fs*SelectedPeriods(i,1)+1):floor(Fs*SelectedPeriods(i,2))-1,:); 

    WindowTemp = ones([length(LfpStateTemp(:,1)),1]);
    Window1 = sigmoid([1:length(LfpStateTemp(:,1))]/Fs-10*TimeScaleGlue,TimeScaleGlue);
    Window= WindowTemp.*Window1'.*flip(Window1');
    Window = repmat(Window,1,nCh);
    display(size(LfpStateTemp))
    display(size(Window))
    LfpStateTemp = LfpStateTemp.*Window;


    LfpState = [LfpState; LfpStateTemp];
end



%compute singlular spectrum analysis (SPA)
% concatenate triggered events on target SPA band (i.e.
szLfpState = size(LfpState);
NsampsSPA = floor(Twindow*Fs);
display(NsampsSPA)
LfpSPA = zeros(szLfpState(1),szLfpState(2)*2*NsampsSPA);
for iCh = 1:nCh
    for iSPA = 1:NsampsSPA
        display(iCh)
        display(iSPA)
        LfpSPA(1:szLfpState(1)-iSPA+1,(2*(iCh-1)+1)*NsampsSPA-iSPA+1) = LfpState(iSPA:szLfpState(1),iCh);

        LfpSPA(iSPA:szLfpState(1),(2*(iCh-1)+1)*NsampsSPA+iSPA) = LfpState(1:szLfpState(1)-iSPA+1,iCh);
    end
end


for SelectICs = 1:NumICs %= input('index of IC to further process');
    SignCorr = [-1];%input('multiply activation by ([1]/[-1]) // inverse sign if loadings are not correct (i.e. negative for delta waves)');
% 
%     SelectICs = input('index of IC to further process');
%     SignCorr = input('multiply activation by ([1]/[-1]) // inverse sign if loadings are not correct (i.e. negative for delta waves)');
    % find selected IC peaks

    ICsig = out.(FreqBandsIC{1}).ICAsig(SelectICs,:)*SignCorr;
    ICt = [1:length(ICsig)]/Fs;

    figure()
    plot(ICt,ICsig)

    Threshold = 4;%input('input the threshold for detection of peaks (it must be positive)');

    [pks,locs] = findpeaks(ICsig, 'MinPeakHeight',Threshold);

    
    if length(pks)<=50
        continue
    end
    
    pks = pks(1:end-2);
    locs = locs(1:end-2);
    % use val of loaded ICs to compute spectrograms


    LfpEventsSPA = zeros([2*floor(Twindow*FsSPA)+1,length(LfpSPA(1,:))]);
    SampWidthIC = floor(Twindow*Fs);
    AvIC = zeros([length(-SampWidthIC:SampWidthIC),1]);
    for iE = 1:length(pks)

        AvIC = AvIC + ICsig(locs(iE)-SampWidthIC:locs(iE)+SampWidthIC)';

        SampsTriggerPower = floor(ICt(locs(iE))*FsSPA);
        
        sampswindow = [SampsTriggerPower-floor(Twindow*FsSPA):SampsTriggerPower+floor(Twindow*FsSPA)];
        display(iE)
        LfpEventsSPA((iE-1)*length(sampswindow)+1:iE*length(sampswindow), :) = LfpSPA(sampswindow,:);


    end
    AvIC = AvIC/length(pks);
    out.AvIC = AvIC;
    out.ICt = [-SampWidthIC:SampWidthIC]/Fs;

    NumPCs=10;
    %compute PCA and recover temporal progression.
    [coeff, ~,~,~,~,~] = pca(LfpEventsSPA,'NumComponents', NumPCs);

    coeffSPA = struct();
    for iPCA = 1:4
        coeffSPA.(['PC' num2str(iPCA)]) = reshape(coeff(:,iPCA),[2*NsampsSPA,nCh]);
    %     if iPCA==1
    %         coeffSPA.(['PC' num2str(1)]) = zeros(size(reshape(coeff(:,iPCA),[2*NsampsSPA,nCh])));
    %     end
    %     coeffSPA.(['PC' num2str(1)]) = coeffSPA.(['PC' num2str(1)])+reshape(coeff(:,iPCA),[2*NsampsSPA,nCh]);
    %     display(iPCA)
    end
    out.SPAtime = [1:length(coeffSPA.(['PC' num2str(1)])(:,1))]/Fs;
    out.SPA = coeffSPA;
    
    save([OutputPath FreqBandsIC{1} '-TimeEmbeddedIC' num2str(SelectICs) '.mat'],'out')

    OutputVideo = [OutputPath FreqBandsIC{1} '-TimeEmbeddedIC' num2str(SelectICs) '-spec.avi'];
%     OutputPath = ['../../../data/DB/Files/B13289O14-DH3/GroupsAnalysis/' FreqBandsLow{1} '-AvIC' num2str(SelectICs) '-AvPower' HighFreqCoupling '-spec.avi'];
    Video_powerbands(out.SPAtime,out.AvIC(1:end-1)',out.SPAtime,out.SPA, OutputVideo, T, indDB)
    
end
    