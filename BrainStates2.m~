function out = BrainStates2(OutPathBrainStates,OutputPathTable,FileNameDB, T, indDB,ind, varargin)
%function out = FunctionName(FileBase ,fMode, Arg1, Arg2)
%here is the help message :
[fMode, MinThetaDeltaRatio, MinTimeRatio, MinSpindleDeltaRatio,MinDurationHVS_sec,ThetaBand,HVSband,interactive,TargetState] = DefaultArgs(varargin,{'compute',0.8, 20,4.5,1, [[3,5];[6,9]], [[0,4];[11 30]],'on','all'});

%body of the function
switch fMode
    case 'compute'
        
        display(['loading ' 'Motor and Spectrogram files'])
        
        MotorState = load(strcat(OutPathBrainStates,T.RecordingId{indDB},'-MotorState.mat'));
        Periods = load(strcat(OutPathBrainStates,T.RecordingId{indDB},'-Periods.mat'));
        MocapDuration = load(strcat(OutPathBrainStates,T.RecordingId{indDB},'-MocapDuration.mat'));
        SpecHVS = load(strcat(OutPathBrainStates,T.RecordingId{indDB},'-SpecHVS.mat'));
        SpecStates = load(strcat(OutPathBrainStates,T.RecordingId{indDB},'-SpecStates.mat'));
        Trigger = str2num(T.TriggerTimes{indDB});
        FsMocap = T.FsMocap(indDB);
        
        Periods = Periods.Periods;
        PerRun = Periods(1);
        PerQui = Periods(2);
        PerSle = Periods(3);

        PerRun = PerRun{1};
        PerQui = PerQui{1};
        PerSle = PerSle{1};
        
        SpecStates = SpecStates.SpecStates;
        WhitenedSpecStates = SpecStates.WhitenedSpecStates; %this is not DC channel but it is lower time resolution spectrogram compared to the SpecHVS

        SpecHVS = SpecHVS.SpecHVS;
        WhitenedSpecHVS = SpecHVS.WhitenedSpecHVS;

        TriggerStart = Trigger(1);
        if length(Trigger)>1
            TriggerStop = Trigger(2);
        else
            TriggerStop = 0;
        end
        TimeTolerance = 1;
        display(Trigger,'Trigger')
%         display(TriggerStop,'TriggerStop')
        MotorState.MotorStateMap(:,1) = MotorState.MotorStateMap(:,1)+TriggerStart;

        counter4 =-1;
        while true
            if strcmp(interactive, 'on')
                display(interactive)
                loop = input('(re)-compute? (1-yes/0-no)');
            else
                loop=1;
                counter4 = counter4+1;
            end
            if loop ==1 & counter4 <= 0    
                display('continued')
                
                [StatePeriods, ~, ~, bands] = BrainStatesER_R(WhitenedSpecStates.ws',WhitenedSpecStates.wt',WhitenedSpecStates.wf',MotorState.MotorStateMap,ThetaBand(1,:),ThetaBand(2,:),MinThetaDeltaRatio, MinTimeRatio);
                [HVSPeriods, ~, ~, bandsHVS] = HVSclass_R(WhitenedSpecHVS.ws',WhitenedSpecHVS.wt',WhitenedSpecHVS.wf',HVSband(1,:), HVSband(2,:), MinSpindleDeltaRatio, MinDurationHVS_sec);
                
                figure()
                plot(MotorState.MotorStateMap(:,2))

                PerTHE = StatePeriods(1);
                PerSWS = StatePeriods(2);
                PerREM = StatePeriods(3);
                PerNThe = StatePeriods(4);
                PerHVS = HVSPeriods{1};

                PerTHE = PerTHE{1};
                PerSWS = PerSWS{1};
                PerREM = PerREM{1};
                PerNThe = PerNThe{1};
                % 
                
%                 display(size(PerSWS),'size SWS top')
                
                PerMicroA = [];
                counter = 1;
                lenPerSle = length(PerSle);
                for i= 1:lenPerSle-1
            %         display(lenPerSle)
            %         display(i)
                    if PerSle(i+1,1)-PerSle(i,2) <= 10
                        PerMicroA(counter,1) = PerSle(i,2);
                        PerMicroA(counter,2) = PerSle(i+1,1);

                        PerSle(i,2)=PerSle(i+1,2);
                        PerSle(i+1,:)=[];
                        counter = counter+1;


            %             display(length(PerSle))
                        while PerSle(i+1,1)-PerSle(i,2) <= 10

                            PerMicroA(counter,1) = PerSle(i,2);
                            PerMicroA(counter,2) = PerSle(i+1,1);
                            counter = counter+1; 
                            if i+2 <= length(PerSle)
                                PerSle(i,2)=PerSle(i+1,2);
                                PerSle(i+1,:)=[];
                            else
                                break
                            end


                        end
                    end
            %         display(lenPerSle-1-counter)
                    if i >= lenPerSle-1-counter
                        display('this is the expected end')
                        display(i)
                        break
                    end

                end

                % % merge Theta states separated by less than 20s
                counter2 = 1;
                sTHE = size(PerTHE);
                if sTHE(1)>=2 | sTHE(2)>=2

                    lenPerTHE = length(PerTHE(:,1));
                    for i= 1:lenPerTHE-1
                        while PerTHE(i+1,1)-PerTHE(i,2) <= 20

                            counter2 = counter2+1; 

                            if i+2 <= length(PerTHE)
                                PerTHE(i,2)=PerTHE(i+1,2);
                                PerTHE(i+1,:)=[];
                            else
                                break
                            end
                        end
                        % remove NThe periods between the merged THE      
                        indexNThe = find((PerNThe(:,1)>=PerTHE(i,1) & PerNThe(:,1)<=PerTHE(i,2)));
                        PerNThe(indexNThe,:) = [];

                        if i >= lenPerTHE-1-counter2
                            break
                        end


                    end
                end
                % merge REM states separated by less than 20s
                counter2 = 1;
                sREM = size(PerREM);
                if sREM(1)>=2 | sREM(2)>=2
                    lenPerREM = length(PerREM(:,1));

                    for i= 1:lenPerREM-1

                        if PerREM(i+1,1)-PerREM(i,2) <= 20

                            PerREM(i,2)=PerREM(i+1,2);
                            PerREM(i+1,:)=[];
                            counter2 = counter2+1;



                            while PerREM(i+1,1)-PerREM(i,2) <= 20

                                counter2 = counter2+1; 

                                PerREM(i,2)=PerREM(i+1,2);
                                PerREM(i+1,:)=[];

                            end
                            % remove REM and NThe periods between the merged SWS
                            indexSWS = find((PerSWS(:,1)>=PerREM(i,1) & PerSWS(:,1)<=PerREM(i,2)));
                            display('these are the indices')
                            display(indexSWS)
                            PerSWS(indexSWS,:) = [];


                            indexNThe = find((PerNThe(:,1)>=PerREM(i,1) & PerNThe(:,1)<=PerREM(i,2)));
                            PerNThe(indexNThe,:) = [];
            %                 display(indexNThe)
                            %\
                        end

                    %     display(lenPerREM-1-counter2)
                        if i >= lenPerREM-1-counter2
                            break
                        end

                    end
                end
                % merge SWS states separated by less than 20s
                counter3 = 1;
                sSWS = size(PerSWS);
                if sSWS(1)>=2 | sSWS(2)>=2

                    lenPerSWS = length(PerSWS(:,1));
                    for i= 1:lenPerSWS-1

                        if PerSWS(i+1,1)-PerSWS(i,2) <= 20

                            PerSWS(i,2)=PerSWS(i+1,2);
                            PerSWS(i+1,:)=[];
                            counter3 = counter3+1;



                            while PerSWS(i+1,1)-PerSWS(i,2) <= 20

                                counter3 = counter3+1; 

                                PerSWS(i,2)=PerSWS(i+1,2);
                                PerSWS(i+1,:)=[];

                            end
                            % remove REM and NThe periods between the merged SWS
                            if PerREM
                                indexREM = find((PerREM(:,1)>=PerSWS(i,1) & PerREM(:,1)<=PerSWS(i,2)));
                                display('these are the indices')
                                display(indexREM)
                                PerREM(indexREM,:) = [];
                            end

                            if PerNThe
                                indexNThe = find((PerNThe(:,1)>=PerSWS(i,1) & PerNThe(:,1)<=PerSWS(i,2)));
                                PerNThe(indexNThe,:) = [];
            %                     display(indexNThe)
                            end
                            %\

                        end

                    %     display(lenPerSWS-1-counter3)
                        if i >= lenPerSWS-1-counter3
                            break
                        end

                    end
                end
                % 
                % % merge NThe states separated by less than 20s
                counter2 = 1;
                sNThe = size(PerNThe);
                if sNThe(1)>=2 | sNThe(2)>=2
                    lenPerNThe = length(PerNThe(:,1));
                    for i= 1:lenPerNThe-1

                        if PerNThe(i+1,1)-PerNThe(i,2) <= 20

                            PerNThe(i,2)=PerNThe(i+1,2);
                            PerNThe(i+1,:)=[];
                            counter2 = counter2+1;

                            while PerNThe(i+1,1)-PerNThe(i,2) <= 20
                                counter2 = counter2+1; 

                                PerNThe(i,2)=PerNThe(i+1,2);
                                PerNThe(i+1,:)=[];
                                if i >= lenPerNThe-1-counter2
                                    break
                                end
                            end
                            if i >= lenPerNThe-1-counter2
                                break
                            end
                            %\
                            if sSWS(1)>=2 | sSWS(2)>=2
                                % remove NThe periods between the merged THE
                                indexSWS = find((PerSWS(:,1)>=PerNThe(i,1) & PerSWS(:,1)<=PerNThe(i,2)));
                                display('these are the indices')
                                display(indexSWS)
                                PerSWS(indexSWS,:) = [];
                            end
                        %         
                            if sREM(1)>=2 | sREM(2)>=2     
                                indexTHE = find((PerTHE(:,1)>=PerNThe(i,1) & PerTHE(:,1)<=PerNThe(i,2)));
                                PerTHE(indexTHE,:) = [];
                                display(indexTHE)
                            end

                        end
                        if i >= lenPerNThe-1-counter2
                            break
                        end
                    %     display(lenPerTHE-1-counter2)


                    end
                end

                 % Check synchrony between ephys and mocap
                FinalTime = max(max([PerRun',PerQui',PerSle']))+TriggerStart;

                if (TriggerStop - TimeTolerance <= FinalTime) &  ( FinalTime <= TriggerStop + TimeTolerance)
                    display(FinalTime,'time expected trigger')
                    display(TriggerStop, 'time trigger')
                    display(strcat('Properly synch Mocap with ',num2str(TimeTolerance),'s time tolerance'))
                    ReturnTrigger = [FinalTime TriggerStop 1];
                else
                    display(FinalTime,'time expected trigger')
                    display(TriggerStop, 'time trigger')
                    display('NOT SYNCH WITH MOCAP')
                    ReturnTrigger = [FinalTime TriggerStop 0];
                end
        
                
                
                figure()
                ax1 = subplot(5,1,1);
                hold on
                for i = 1:length(PerQui(:,1))
        %         display(i)
                a(i) = area([PerQui(i,1)+TriggerStart PerQui(i,2)+TriggerStart],[1 1]);
                a(i).FaceColor = [0 1 0];
                a(i).LineStyle = 'none';

                a(i).FaceAlpha = 0.2;
                end

                for i = 1:length(PerRun(:,1))
            %         display([PerRun(i,1) PerRun(i,2)])
                    b(i) = area([PerRun(i,1)+TriggerStart PerRun(i,2)+TriggerStart],[1 1]);
                    b(i).FaceColor = [1 0 0];
                    b(i).LineStyle = 'none';
                    b(i).FaceAlpha = 0.2;
                end



                for i = 1:length(PerSle(:,1))

            %         display([PerSle(i,1) PerSle(i,2)])
                    c(i) = area([PerSle(i,1)+TriggerStart PerSle(i,2)+TriggerStart],[1 1]);
                    c(i).FaceColor = [0 0 1];
                    c(i).LineStyle = 'none';

                    c(i).FaceAlpha = 0.2;
                end

                plot(MotorState.MotorStateMap(:,1), MotorState.MotorStateMap(:,3),'k')
                %% 
                ax2 = subplot(5,1,2);
                hold on
                sSWS = size(PerSWS);
                if sSWS(1)>=2 | sSWS(2)>=2
                    for i = 1:length(PerSWS(:,1))
                    %     display(i)
                        d(i) = area([PerSWS(i,1) PerSWS(i,2)],[1 1]);
                        d(i).FaceColor = [0 0 1];
                        d(i).LineStyle = 'none';

                        d(i).FaceAlpha = 0.2;
                    end
                end

                sTHE = size(PerTHE);
                if sTHE(1)>=2 | sTHE(2)>=2
                    for i = 1:length(PerTHE(:,1))
                    %     display([PerTHE(i,1) PerTHE(i,2)])
                        e(i) = area([PerTHE(i,1) PerTHE(i,2)],[1 1]);
                        e(i).FaceColor = [1 0 0];
                        e(i).LineStyle = 'none';
                        e(i).FaceAlpha = 0.2;
                    end
                end

                sREM = size(PerREM);
                if sREM(1)>=2 | sREM(2)>=2
                    for i = 1:length(PerREM(:,1))

                    %     display([PerREM(i,1) PerREM(i,2)])
                        f(i) = area([PerREM(i,1) PerREM(i,2)],[1 1]);
                        f(i).FaceColor = [0 1 0];
                        f(i).LineStyle = 'none';

                        f(i).FaceAlpha = 0.2;
                    end
                end

                sNThe = size(PerNThe);
                if sNThe(1)>=2 | sNThe(2)>=2
                    for i = 1:length(PerNThe(:,1))

                    %     display([PerREM(i,1) PerREM(i,2)])
                        g(i) = area([PerNThe(i,1) PerNThe(i,2)],[1 1]);
                        g(i).FaceColor = [0 0 0];
                        g(i).LineStyle = 'none';

                        g(i).FaceAlpha = 0.2;
                    end
                end

                if length(PerHVS) >= 1
                    for i = 1:length(PerHVS(:,1))

                        y(i) = area([PerHVS(i,1) PerHVS(i,2)],[1 1]);
                        y(i).FaceColor = [0 0 0];
                        y(i).LineStyle = 'none';

                        y(i).FaceAlpha = 1;
                    end
                end


                if length(PerMicroA) >= 1
                    for i = 1:length(PerMicroA(:,1))

                        j(i) = area([PerMicroA(i,1)+TriggerStart PerMicroA(i,2)+TriggerStart],[1 1]);
                        j(i).FaceColor = [0 0 0];
                        j(i).LineStyle = 'none';

                        j(i).FaceAlpha = 1;
                    end
                end
                
                 %this is not DC channel but it is lower time resolution spectrogram compared to the SpecHVS
                ax3 = subplot(5,1,3);
                h= pcolor(WhitenedSpecStates.wt,WhitenedSpecStates.wf,log10(abs(WhitenedSpecStates.ws')));
                ylim([1 50])
                caxis([min(min(log10(abs(WhitenedSpecStates.ws)'))) max(max(log10(abs(WhitenedSpecStates.ws'))))])
                set(gca,'YScale','log')
                set(gca,'YDir','normal')
                colormap('jet')
                set(h, 'EdgeColor', 'none')

                ax4 = subplot(5,1,4);

                %%%%%%%%%%%%%%Ratio Theta delta
                ratio = bands.ratio;
                map = ratio > MinThetaDeltaRatio;
                if MinTimeRatio >= WhitenedSpecStates.wt(2)-WhitenedSpecStates.wt(1)

                    SampsMapFilter = floor(MinTimeRatio/(WhitenedSpecStates.wt(2)-WhitenedSpecStates.wt(1)));
                    map2(1:SampsMapFilter)= map(1:SampsMapFilter);


                    for i = SampsMapFilter:length(map)-SampsMapFilter
                        if (map(i-SampsMapFilter+1) == 1) && (map(i+SampsMapFilter)==1)
                            map2(i-SampsMapFilter+1:i+SampsMapFilter) = 1;
                        end
                    end
                    for i = SampsMapFilter:length(map)-SampsMapFilter
                        if (map(i-SampsMapFilter+1) == 0) && (map(i+SampsMapFilter)==0)
                            map2(i-SampsMapFilter+1:i+SampsMapFilter) = 0;
                        end
                    end      

                end
                %%%%%%%%%%%%%%%%%Ratio spindle delta
        %         ratioHVS = bandsHVS.ratio;
        % 
        %         mapmapHVS = ratioHVS > MinSpindleDeltaRatio;
        % 
        %         if MinDurationHVS_sec >= WhitenedSpecHVS.wt(2)-WhitenedSpecHVS.wt(1)
        % 
        %             SampsMapFilter = floor(MinDurationHVS_sec/(WhitenedSpecHVS.wt(2)-WhitenedSpecHVS.wt(1)));
        %             mapmapHVS2(1:SampsMapFilter)= mapmapHVS(1:SampsMapFilter);
        % 
        % 
        %             for i = SampsMapFilter:length(mapmapHVS)-SampsMapFilter
        %                 if (mapmapHVS(i-SampsMapFilter+1) == 1) && (mapmapHVS(i+SampsMapFilter)==1)
        %                     mapmapHVS2(i-SampsMapFilter+1:i+SampsMapFilter) = 1;
        %                 end
        %             end
        %             for i = SampsMapFilter:length(mapmapHVS)-SampsMapFilter
        %                 if (mapmapHVS(i-SampsMapFilter+1) == 0) && (mapmapHVS(i+SampsMapFilter)==0)
        %                     mapmapHVS2(i-SampsMapFilter+1:i+SampsMapFilter) = 0;
        %                 end
        %             end      
        %             mapHVS = mapmapHVS2';
        %         end
        %         %%%%%%%%%%%%%%%%


                time = WhitenedSpecStates.wt;

                if length(time')>length(map2)
                    map2= [map2, zeros([1, length(time')-length(map2)])];
                else
                    time= [time; zeros([length(map2)-length(time'), 1])];
                end
                plot(time, map2','k')
                ylim([-0.5 1.5])
                ylabel('v (cm/s)')
                xlabel('t (s)')


                ax5 = subplot(5,1,5);
                plot(time,ratio);
                ylim([0 2])
                linkaxes([ax1,ax2,ax3,ax4, ax5],'x')
        %         ax6 = subplot(6,1,6);
%                 SpecHVS= SpecHVS(1);
        %       
        % plot all HVS events
                sHVS = size(PerHVS);
                if sHVS(1)>=2 | sHVS(2)>=2
                    side = floor(sqrt(length(PerHVS(:,1))))+1;
                    figure()

                    for i = 1:length(PerHVS(:,1))
                        ax = subplot(side,side,i); 
                        tinit = PerHVS(i,1);
                        tfin = PerHVS(i,2);
                        index = find((WhitenedSpecHVS.wt >= tinit-5) & (WhitenedSpecHVS.wt <= tfin+5)) ;
                        h= pcolor(WhitenedSpecHVS.wt(index),WhitenedSpecHVS.wf,log10(abs(WhitenedSpecHVS.ws(index,:)')));
                        ylim([0.5 150])
                        caxis([min(min(log10(abs(WhitenedSpecHVS.ws(index,:))')))+0.5 max(max(log10(abs(WhitenedSpecHVS.ws(index,:)'))))-0.5])
                        set(gca,'YScale','log')
                        set(gca,'YDir','normal')
                        colormap('parula')
                        set(h, 'EdgeColor', 'none')

                    end

                end
                if strcmp(interactive, 'on')
                    ChangeThetaDeltaRatio = input('Change in Theta/delta for brain states classification');
                else
                    ChangeThetaDeltaRatio=[];
                end
                if ChangeThetaDeltaRatio
                    MinThetaDeltaRatio = MinThetaDeltaRatio + ChangeThetaDeltaRatio;
                end
                display(MinThetaDeltaRatio,'current MinThetaDeltaRatio')
                if strcmp(interactive, 'on')
                    ChangeSpindleDeltaRatio = input('Change in Spindle/delta for HVS detection');
                else
                    ChangeSpindleDeltaRatio=[];
                end
                if ChangeSpindleDeltaRatio
                    MinSpindleDeltaRatio = MinSpindleDeltaRatio + ChangeSpindleDeltaRatio;
                end
                display(MinSpindleDeltaRatio,'current MinSpindleDeltaRatio')
                 
                figure()
                histogram(bands.ratio)
                xline(MinThetaDeltaRatio)

                figure()
                histogram(bandsHVS.ratio)
                xline(MinSpindleDeltaRatio)

            %    
                
            else
                %save structure with brain state periods
                PerStates = struct('PerREM',PerREM,'PerSWS',PerSWS,'PerTHE',PerTHE,'PerNThe',PerNThe,'PerMicroA',PerMicroA, 'PerHVS', PerHVS,'bands',bands,'bandsHVS',bandsHVS);
                save(strcat(OutPathBrainStates,T.RecordingId{indDB},'-PerStates.mat'),'PerStates')
                T.ThresholdThetaDelta(indDB) = MinThetaDeltaRatio;
                T.ThresholdSpindleDelta(indDB) = MinSpindleDeltaRatio;
                out.T = T;
%                 writetable(T,strcat(OutputPathTable,FileNameDB,'.xlsx'))
                display('jumped to next')
                break
            end
        end
    case 'display'
        MinThetaDeltaRatio = T.ThresholdThetaDelta(indDB);
        MinSpindleDeltaRatio = T.ThresholdSpindleDelta(indDB);
        
        PerStates = load(strcat(OutPathBrainStates, T.RecordingId{indDB},'-PerStates.mat'));
        MotorState = load(strcat(OutPathBrainStates, T.RecordingId{indDB},'-MotorState.mat'));
        SpecStates = load(strcat(OutPathBrainStates, T.RecordingId{indDB},'-SpecStates.mat'));
        SpecHVS = load(strcat(OutPathBrainStates, T.RecordingId{indDB},'-SpecHVS.mat'));
        Periods = load(strcat(OutPathBrainStates, T.RecordingId{indDB},'-Periods.mat'));
        Trigger = str2num(T.TriggerTimes{indDB});
        TriggerStart = Trigger(1);
        
        PerREM = PerStates.PerStates.PerREM;
        PerSWS = PerStates.PerStates.PerSWS;
        PerTHE = PerStates.PerStates.PerTHE;
        PerNThe = PerStates.PerStates.PerNThe;
        PerMicroA = PerStates.PerStates.PerMicroA;
        PerHVS = PerStates.PerStates.PerHVS;
        bands = PerStates.PerStates.bands;
        
        %plot motor state classification and export figure
        PerRun = Periods.Periods(1);
        PerQui = Periods.Periods(2);
        PerSle = Periods.Periods(3);

        PerRun = PerRun{1};
        PerQui = PerQui{1};
        PerSle = PerSle{1};
        
        figure()
        ax1 = subplot(5,1,1);
        hold on
        for i = 1:length(PerQui(:,1))
%         display(i)
        a(i) = area([PerQui(i,1)+TriggerStart PerQui(i,2)+TriggerStart],[1 1]);
        a(i).FaceColor = [0 1 0];
        a(i).LineStyle = 'none';

        a(i).FaceAlpha = 0.2;
        end

        for i = 1:length(PerRun(:,1))
    %         display([PerRun(i,1) PerRun(i,2)])
            b(i) = area([PerRun(i,1)+TriggerStart PerRun(i,2)+TriggerStart],[1 1]);
            b(i).FaceColor = [1 0 0];
            b(i).LineStyle = 'none';
            b(i).FaceAlpha = 0.2;
        end



        for i = 1:length(PerSle(:,1))

    %         display([PerSle(i,1) PerSle(i,2)])
            c(i) = area([PerSle(i,1)+TriggerStart PerSle(i,2)+TriggerStart],[1 1]);
            c(i).FaceColor = [0 0 1];
            c(i).LineStyle = 'none';

            c(i).FaceAlpha = 0.2;
        end

        plot(MotorState.MotorStateMap(:,1), MotorState.MotorStateMap(:,3),'k')
        %% 
        ax2 = subplot(5,1,2);
        hold on
        sSWS = size(PerSWS);
        if sSWS(1)>=2 | sSWS(2)>=2
            for i = 1:length(PerSWS(:,1))
            %     display(i)
                d(i) = area([PerSWS(i,1) PerSWS(i,2)],[1 1]);
                d(i).FaceColor = [0 0 1];
                d(i).LineStyle = 'none';

                d(i).FaceAlpha = 0.2;
            end
        end
        
        sTHE = size(PerTHE);
        if sTHE(1)>=2 | sTHE(2)>=2
            for i = 1:length(PerTHE(:,1))
            %     display([PerTHE(i,1) PerTHE(i,2)])
                e(i) = area([PerTHE(i,1) PerTHE(i,2)],[1 1]);
                e(i).FaceColor = [1 0 0];
                e(i).LineStyle = 'none';
                e(i).FaceAlpha = 0.2;
            end
        end
        
        sREM = size(PerREM);
        if sREM(1)>=2 | sREM(2)>=2
            for i = 1:length(PerREM(:,1))

            %     display([PerREM(i,1) PerREM(i,2)])
                f(i) = area([PerREM(i,1) PerREM(i,2)],[1 1]);
                f(i).FaceColor = [0 1 0];
                f(i).LineStyle = 'none';

                f(i).FaceAlpha = 0.2;
            end
        end
        
        sNThe = size(PerNThe);
        if sNThe(1)>=2 | sNThe(2)>=2
            for i = 1:length(PerNThe(:,1))

            %     display([PerREM(i,1) PerREM(i,2)])
                g(i) = area([PerNThe(i,1) PerNThe(i,2)],[1 1]);
                g(i).FaceColor = [0 0 0];
                g(i).LineStyle = 'none';

                g(i).FaceAlpha = 0.2;
            end
        end
        
        if length(PerHVS) >= 1
            for i = 1:length(PerHVS(:,1))

                display([PerHVS(i,1) PerHVS(i,2)])
                y(i) = area([PerHVS(i,1) PerHVS(i,2)],[1 1]);
                y(i).FaceColor = [0 0 0];
                y(i).LineStyle = 'none';

                y(i).FaceAlpha = 1;
            end
        end


        if length(PerMicroA) >= 1
            for i = 1:length(PerMicroA(:,1))

                display([PerMicroA(i,1) PerMicroA(i,2)])
                j(i) = area([PerMicroA(i,1)+TriggerStart PerMicroA(i,2)+TriggerStart],[1 1]);
                j(i).FaceColor = [0 0 0];
                j(i).LineStyle = 'none';

                j(i).FaceAlpha = 1;
            end
        end
        display(SpecStates.SpecStates)
        WhitenedSpecStates = SpecStates.SpecStates.WhitenedSpecStates; %this is not DC channel but it is lower time resolution spectrogram compared to the SpecHVS
        ax3 = subplot(5,1,3);
        h= pcolor(WhitenedSpecStates.wt,WhitenedSpecStates.wf,log10(abs(WhitenedSpecStates.ws')));
        ylim([1 50])
%         caxis([min(min(log10(abs(WhitenedSpecStates.ws)')))+1 max(max(log10(abs(WhitenedSpecStates.ws'))))-0.5])
        set(gca,'YScale','log')
        set(gca,'YDir','normal')
        colormap('jet')
        set(h, 'EdgeColor', 'none')

        ax4 = subplot(5,1,4);

        %%%%%%%%%%%%%%Ratio Theta delta
        ratio = bands.ratio;
        map = ratio > MinThetaDeltaRatio;
        if MinTimeRatio >= WhitenedSpecStates.wt(2)-WhitenedSpecStates.wt(1)

            SampsMapFilter = floor(MinTimeRatio/(WhitenedSpecStates.wt(2)-WhitenedSpecStates.wt(1)));
            map2(1:SampsMapFilter)= map(1:SampsMapFilter);


            for i = SampsMapFilter:length(map)-SampsMapFilter
                if (map(i-SampsMapFilter+1) == 1) && (map(i+SampsMapFilter)==1)
                    map2(i-SampsMapFilter+1:i+SampsMapFilter) = 1;
                end
            end
            for i = SampsMapFilter:length(map)-SampsMapFilter
                if (map(i-SampsMapFilter+1) == 0) && (map(i+SampsMapFilter)==0)
                    map2(i-SampsMapFilter+1:i+SampsMapFilter) = 0;
                end
            end      

        end
        %%%%%%%%%%%%%%%%%Ratio spindle delta
%         ratioHVS = bandsHVS.ratio;
% 
%         mapmapHVS = ratioHVS > MinSpindleDeltaRatio;
% 
%         if MinDurationHVS_sec >= WhitenedSpecHVS.wt(2)-WhitenedSpecHVS.wt(1)
% 
%             SampsMapFilter = floor(MinDurationHVS_sec/(WhitenedSpecHVS.wt(2)-WhitenedSpecHVS.wt(1)));
%             mapmapHVS2(1:SampsMapFilter)= mapmapHVS(1:SampsMapFilter);
% 
% 
%             for i = SampsMapFilter:length(mapmapHVS)-SampsMapFilter
%                 if (mapmapHVS(i-SampsMapFilter+1) == 1) && (mapmapHVS(i+SampsMapFilter)==1)
%                     mapmapHVS2(i-SampsMapFilter+1:i+SampsMapFilter) = 1;
%                 end
%             end
%             for i = SampsMapFilter:length(mapmapHVS)-SampsMapFilter
%                 if (mapmapHVS(i-SampsMapFilter+1) == 0) && (mapmapHVS(i+SampsMapFilter)==0)
%                     mapmapHVS2(i-SampsMapFilter+1:i+SampsMapFilter) = 0;
%                 end
%             end      
%             mapHVS = mapmapHVS2';
%         end
%         %%%%%%%%%%%%%%%%


        time = WhitenedSpecStates.wt;
        display(size(time),'time len');

        display(size(map2),'map2 len')
        if length(time')>length(map2)
            map2= [map2, zeros([1, length(time')-length(map2)])];
        else
            time= [time; zeros([length(map2)-length(time'), 1])];
        end
        plot(time, map2','k')
        ylim([-0.5 1.5])
        ylabel('v (cm/s)')
        xlabel('t (s)')


        ax5 = subplot(5,1,5);
        plot(time,ratio);
        ylim([0 2])
        
        linkaxes([ax1,ax2,ax3,ax4, ax5],'x')
%         ax6 = subplot(6,1,6);
        SpecHVS= SpecHVS(1);
%         
        WhitenedSpecHVS = SpecHVS.SpecHVS.WhitenedSpecHVS; %this is not DC channel but it is lower time resolution spectrogram compared to the SpecHVS
        
%         time = WhitenedSpecHVS.wt;
%         plot(time,ratioHVS);
%         ylim([0 2])

%         linkaxes([ax1,ax2,ax3,ax4, ax5, ax6],'x')

    %    
        % plot all HVS events
        sHVS = size(PerHVS);
        if sHVS(1)>=2 | sHVS(2)>=2
            side = floor(sqrt(length(PerHVS(:,1))))+1;
            figure()

            for i = 1:length(PerHVS(:,1))
                ax = subplot(side,side,i); 
                tinit = PerHVS(i,1);
                tfin = PerHVS(i,2);
                index = find((WhitenedSpecHVS.wt >= tinit-5) & (WhitenedSpecHVS.wt <= tfin+5)) ;
                h= pcolor(WhitenedSpecHVS.wt(index),WhitenedSpecHVS.wf,log10(abs(WhitenedSpecHVS.ws(index,:)')));
                ylim([0.5 150])
                caxis([min(min(log10(abs(WhitenedSpecHVS.ws(index,:))')))+0.5 max(max(log10(abs(WhitenedSpecHVS.ws(index,:)'))))-0.5])
                set(gca,'YScale','log')
                set(gca,'YDir','normal')
                colormap('parula')
                set(h, 'EdgeColor', 'none')

            end

        end
        
        figure()
        histogram(bands.ratio)
        xline(MinThetaDeltaRatio)
%         
%         figure()
%         histogram(bandsHVS.ratio)
%         xline(MinSpindleDeltaRatio)
%         
        out.T = T;
    case 'groupstats'
        
        PerState = [];
        MeanPowerDeltaArr = [];
        MeanPowerThetaArr = [];
        MeanPowerSpindleArr = [];
        c = [];
        
        DeltaBand = [0.5 1];
        ThetaBand = [5 9];
        SpindleBand = [9 20];
        Fs = T.Fs;
        
        TargetStateLabel = '';
        if strcmp(TargetState,'all')
            TargetStateLabel='all';
            StatesCell = {'PerREM';'PerSWS';'PerTHE';'PerNThe';'';'';'';''};
        else
            TargetState = ['Per' TargetState];
        end
            
        for iFile =1:length(ind)
            display(T.RecordingId{ind(iFile)},'Considering File')
            
            OutPathStates = ['../../../data/DB/Files/' T.DeviceName{ind(iFile)} '/States/'];
            
            PerStates = load(strcat(OutPathStates, T.RecordingId{ind(iFile)},'-PerStates.mat'));
            SpecHVS = load(strcat(OutPathStates, T.RecordingId{ind(iFile)},'-SpecHVS.mat'));

            WhitenedSpec = SpecHVS.SpecHVS.WhitenedSpecHVS;
            FsSpec = 1/(WhitenedSpec.wt(2)-WhitenedSpec.wt(1));
            
            DeltaInd = find(WhitenedSpec.wf >= DeltaBand(1) & WhitenedSpec.wf <= DeltaBand(2));
            ThetaInd = find(WhitenedSpec.wf >= ThetaBand(1) & WhitenedSpec.wf <= ThetaBand(2));
            SpindleInd = find(WhitenedSpec.wf >= SpindleBand(1) & WhitenedSpec.wf <= SpindleBand(2));
            
            fn = fieldnames(PerStates.PerStates);
            
            

            for i = 1:length(fn)
                if strcmp(TargetStateLabel,'all') 
                    if strcmp(fn{i},StatesCell{i})
                        PerStateTemp = PerStates.PerStates.(fn{i});
                        szTemp = size(PerStateTemp);
                        display(szTemp)
                        display(PerStateTemp)
                        if szTemp(1)>=1
                            for ii =1:length(PerStateTemp(:,1))
                                display(floor(FsSpec*PerStateTemp(ii,1)))

                                MeanPowerDelta = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1))+1:floor(FsSpec*PerStateTemp(ii,2)),DeltaInd)));
                                MeanPowerTheta = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1))+1:floor(FsSpec*PerStateTemp(ii,2)),ThetaInd)));
                                MeanPowerSpindle = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1))+1:floor(FsSpec*PerStateTemp(ii,2)),SpindleInd)));

                                MeanPowerDeltaArr = [MeanPowerDeltaArr,MeanPowerDelta];
                                MeanPowerThetaArr = [MeanPowerThetaArr,MeanPowerTheta];
                                MeanPowerSpindleArr = [MeanPowerSpindleArr,MeanPowerSpindle];
                                c = [c,i];
                            end
                        end
                    end
                else
                    if strcmp(fn{i},TargetState)
                        
                        PerStateTemp = PerStates.PerStates.(fn{i});
                        PerState = [PerState ; PerStateTemp];
                        szTemp = size(PerStateTemp);
                        if szTemp(1)>=1
                            for ii =1:length(PerStateTemp(:,1))
                                display(ii)
                                MeanPowerDelta = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1)):floor(FsSpec*PerStateTemp(ii,2)),DeltaInd)));
                                MeanPowerTheta = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1)):floor(FsSpec*PerStateTemp(ii,2)),ThetaInd)));
                                MeanPowerSpindle = mean(mean(WhitenedSpec.ws(floor(FsSpec*PerStateTemp(ii,1)):floor(FsSpec*PerStateTemp(ii,2)),SpindleInd)));

                                MeanPowerDeltaArr = [MeanPowerDeltaArr,MeanPowerDelta];
                                MeanPowerThetaArr = [MeanPowerThetaArr,MeanPowerTheta];
                                MeanPowerSpindleArr = [MeanPowerSpindleArr,MeanPowerSpindle];
                                
                            end
                        end
                    end
                end
            end
            
        
        end
        
        

        Trigger = str2num(T.TriggerTimes{ind(iFile)});
        TriggerStart = Trigger(1);
        
        DurationTh=20;
        
        if strcmp(TargetStateLabel,'all')
            figure()
            MarkerSize= 10;
            scatter3(MeanPowerDeltaArr(IndicesLong),MeanPowerThetaArr(IndicesLong),MeanPowerSpindleArr(IndicesLong),MarkerSize,c,'filled')
            xlabel('PowerDelta')
            ylabel('PowerTheta')
            zlabel('PowerSpindle')
            a= colorbar;
            ylabel(a,'duration')
            title(TargetState)
        else
            figure()
            MarkerSize= 100;
            c = 1:length(IndicesLong);
            scatter3(MeanPowerDeltaArr(IndicesLong),MeanPowerThetaArr(IndicesLong),MeanPowerSpindleArr(IndicesLong),MarkerSize,c,'filled')
            xlabel('PowerDelta')
            ylabel('PowerTheta')
            zlabel('PowerSpindle')
            a= colorbar;
            ylabel(a,'duration')
            title(TargetState)
            
        end
        
end


