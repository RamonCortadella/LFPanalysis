close('all')
%% Define Queries
Queries={};
% Queries.depth=1;
Queries.coverage=1;
Queries.flag=1;
Queries.CoupledDC=1;
Queries.mocap=1;
Queries.SingleShank=0;
Queries.LostMocapSamples=0;
Queries.depth=0;
Queries.drifts=0;
Queries.recordingSystem = 0;
Queries.Degraded = 0;
Queries.DeviceName = 'B13289O14-DH3';%{'B13289O14-DH1','B13289O14-DH2','B13289O14-DH3','B13289O14-DH5','B13289O24-DH1SL7'};%{'B13289O14-DH1','B13289O14-DH2','B13289O14-DH3','B13289O14-DH5','B13289O24-DH1SL7'};%{-1,'B13289O14-DH1'}; % if cell array with -1 in first field, the opposite of the query is used


extension = '.interp.lfp';
%% Search in DB
FileNameDB = 'RecordingsDB';
[recs, val, ind, T] = SearchDB(['/storage2/ramon/data/DB/' FileNameDB, '.xlsx'], Queries);

%% Apply processing function on retrieved filenames
zsRec = size(recs);

for iFile = 1:zsRec(1)

    display(iFile,'Processing File')

    if T.CoupledAC(ind(iFile)) == 1 & T.CoupledDC(ind(iFile)) ==0
        Coupling ='.AC';
    elseif T.CoupledAC(ind(iFile)) == 0 & T.CoupledDC(ind(iFile)) ==1
        Coupling ='.DC';
    else
        Coupling ='';
    end
        
        
    InputPathMotor = ['../../../data/DB/Files/' T.DeviceName{ind(iFile)} '/Mocap/'];
    
    OutputPathTable = '../../../data/DB/';
    
    InputPath = ['../../../data/DB/Files/' T.DeviceName{ind(iFile)} '/' T.RecordingId{ind(iFile)}];
    OutPathStates = ['../../../data/DB/Files/' T.DeviceName{ind(iFile)} '/' T.RecordingId{ind(iFile)} '/States/'];
    
    FileName = [InputPath,'/',T.FileName{ind(iFile)}(1:end-4),extension];
    MocapFile = [InputPathMotor, T.RecordingId{ind(iFile)},'.csv'];
    
end

% %% compute triggered average
BrainState = 'PerSWS';
InputPath = strcat('../../../data/DB/Files/B13289O14-DH3/GroupsAnalysis/','Group',Coupling,'.',BrainState,'','.ICA.mat'); %the DB search must point to the files used for ICA computation to access associated metadata
OutputPath = '../../../data/DB/Files/B13289O14-DH3/GroupsAnalysis/';

BrainState='PerSWS';
FreqBandLow={'delta'};
FreqBandsHigh={'beta','lowgamma','highgamma'};
HighFreqCoupling='.AC';
FMinSpec =100;
DownFact=[];
Twindow=1;
TimeScaleGlue=0.2;
indDB = ind(iFile);
nCh = T.NumCh(indDB);
nRows = T.nRows(indDB);
nCols = T.nCols(indDB);
Fs = T.Fs(indDB);
GaussianFact = [];
MedFact = false; % or []

load(InputPath,'out')
fB.isa = [0.02 0.5];
fB.delta = [0.5 5];
fB.theta = [5 9];
fB.spindle = [9 20];
fB.beta = [20 30];
fB.lowgamma = [30 50];
fB.highgamma = [50 100];


% The coupling of the data in the DB search, that must match that in
% InputPath is used to compute the Coupling. If it is AC coupled the Fs is
% corrected as in the ICA computation

if T.CoupledAC(indDB) == 1 & T.CoupledDC(indDB) ==0
    Coupling ='.AC';
elseif T.CoupledAC(indDB) == 0 & T.CoupledDC(indDB) ==1
    Coupling ='.DC';
else
    Coupling ='';
end

if strcmp(Coupling, '.AC') | strcmp(Coupling, '')
    if T.depth(indDB) == 1 & T.SingleShank(indDB) == 0
        DownFact = 6;
    elseif T.depth(indDB)==0 
        DownFact = 3;
    end
    Fs = Fs/DownFact;

end

%indicate a single frequency band that defines the IC used for the
%triggered average
A = out.(FreqBandLow{1}).A;
display(length(A(1,:)),'Index of IC in the displayed computation: CHECK FOR INCONSISTENCIES!!!')

%display components map
[bX, bY]= meshgrid([1:nCols]',[1:nRows]');
v = reshape(bX,[],1);
w = reshape(bY,[],1);
figure()
title(FreqBandLow{1})
NumICs = length(A(1,:));
for i = 1:NumICs
    subplot(floor(sqrt(NumICs))+1,floor(sqrt(NumICs))+1,i)
    F=  scatteredInterpolant(v,w,A(:,i));
    bF = F(bX,bY);
    imagesc(bF)
    colorbar

    title(['index=' num2str(i)])
end

display('ready*******')



InputPathState = '/storage2/ramon/data/DB/Files/';
Lfp=[];
val = out.val;
if strcmp(Coupling,'.DC') & strcmp(HighFreqCoupling,'.AC')
   FsHigh = T.Fs(indDB-1);
else
   FsHigh = T.Fs(indDB);
end

if DownFact
    
    FsHigh = FsHigh/DownFact;
end

SelectedPeriods = [];
for i = 1:length(val)

    Tend = 0;
    if contains(extension,'interp') %force use of interpolated files
        dn = split(val{1},'-');
        Device = [dn{1} '-' dn{2}];
        if contains(T.FileName(indDB),'ECoG')
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} '.ECoG' HighFreqCoupling extension];
        elseif  contains(T.FileName(indDB),'Depth')
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} '.Depth' HighFreqCoupling extension];
        else
            FileName = ['../../../data/DB/Files/' Device '/' val{i} '/' val{i} HighFreqCoupling extension];
        end

        display(FileName, 'loading file for Lfp concatenation across recordings')
        LfpT = LoadBinaryDAT(FileName, [0:nCh-1], nCh,1)';
        
        if DownFact
            LfpT = LfpT(1:DownFact:end,:);
        end
        szLfp = size(Lfp);
        Tend = szLfp(1)/FsHigh;
        display(FsHigh,'*****************')
        Lfp = [Lfp; LfpT];

        if BrainState
            display(indDB)
            display(T.RecordingId{indDB})

            display(strcat(InputPathState,Device,'/',val{i},'/States/',val{i},'.PerStates.mat'))

            PerStates = load(strcat(InputPathState,Device,'/',val{i},'/States/',val{i} ,'.PerStates.mat'));
            SelectedPeriodsTemp = PerStates.PerStates.(BrainState);
            DurationStates = SelectedPeriodsTemp(:,2)-SelectedPeriodsTemp(:,1);
            SelectedPeriodsTemp = SelectedPeriodsTemp(find(DurationStates >=out.MinDurationStates),:); 
            SelectedPeriodsTemp = SelectedPeriodsTemp + Tend;

            SelectedPeriods = [SelectedPeriods; SelectedPeriodsTemp];
%             DurationStates = DurationStates(find(DurationStates >=MinDurationStates));
        end
    else
        display('ATTENTION! : Extension must contain "interp" processing step for comparable recordings!!!!! This process will crash in 100s')
        pause(100)
        break
    end
end

         
LfpState = [];
%concatenate Lfp for selected periods using a zeroing
for i = 1:length(SelectedPeriods(:,1))
    display(size(Lfp),'size Lfp')
    display(floor(FsHigh*SelectedPeriods(i,:)), 'min and max samp Period')
    LfpStateTemp = Lfp(floor(FsHigh*SelectedPeriods(i,1)+1):floor(FsHigh*SelectedPeriods(i,2))-1,:); 

    WindowTemp = ones([length(LfpStateTemp(:,1)),1]);
    Window1 = sigmoid([1:length(LfpStateTemp(:,1))]/FsHigh-10*TimeScaleGlue,TimeScaleGlue);
    Window= WindowTemp.*Window1'.*flip(Window1');
    Window = repmat(Window,1,nCh);
    display(size(LfpStateTemp))
    display(size(Window))
    LfpStateTemp = LfpStateTemp.*Window;


    LfpState = [LfpState; LfpStateTemp];
end
if strcmp(HighFreqCoupling,'.AC')
    display([49 51]/(FsHigh)*2)
    display(FsHigh)
    LfpState = ButFilter(LfpState,2,[49 51]/(FsHigh)*2,'stop');
    LfpState = ButFilter(LfpState,2,[99 101]/(FsHigh)*2,'stop');
%     LfpState = ButFilter(LfpState,2,[149 151]/(FsHigh)*2,'stop');
end

SpatialFilt = false;
if GaussianFact 
    SpatialFilt = true;
elseif MedFact
    SpatialFilt = true;
end
if SpatialFilt
    [bX, bY]= meshgrid([1:nCols]',[1:nRows]');

    v = reshape(bX,[],1);
    w = reshape(bY,[],1); 
    LfpStateSmooth = [];
    lLfp =length(LfpState(:,1));
    for k =1:lLfp
        display(k)
%         display(lLfp)
        map = LfpState(k,:);
        F=  scatteredInterpolant(v,w,map');
        bF = F(bX,bY);
        if GaussianFact
            bF = imgaussfilt(bF,GaussianFact);
        elseif MedFact
            bF = medfilt2(bF);
        end
        LfpState(k,:) = reshape(bF,[],1);
    end
end


SelectedICs = input('indices of selected ICs to use for triggered average');
SignCorr = input('sign of peaks to detect ([1]/[-1]');
% 
% AvPower = struct();
% AvLfp = struct();
% PowEvent=struct();
% LfpEvent=struct();
% LfpDist.(FreqBandLow{1}) = struct();
for iSelectICs = SelectedICs %= input('index of IC to further process');
    %input('multiply activation by ([1]/[-1]) // inverse sign if loadings are not correct (i.e. negative for delta waves)');
    %find selected IC peaks

    ICsig = out.(FreqBandLow{1}).ICAsig(iSelectICs,:)*SignCorr;
    ICt = [1:length(ICsig)]/Fs;

    Threshold = 0.1;%input('input the threshold for detection of peaks (it must be positive)');

    [pks,locs] = findpeaks(ICsig, 'MinPeakHeight',Threshold);
    if length(pks)<=50
        continue
        display(['No pks above threshold for IC' num2str(iSelectICs)])
    end
    p = prctile(pks,90);
    p2 = prctile(pks,97);
    
    figure()
    histogram(pks,100)
    vline(p)
    [pks,locs] = findpeaks(ICsig, 'MinPeakHeight',p);

    [pks2,locs2] = findpeaks(ICsig, 'MinPeakHeight',p2);
    
    
    pks = pks(1:end-2);
    locs = locs(1:end-2);
    pks2 = pks2(1:end-2);
    locs2 = locs2(1:end-2);
    
    display(length(locs),'length locs')
    display(length(locs2),'length locs2')
    
    locs3 = locs;
    locs3(ismember(locs,locs2)) = [];
    pks(ismember(locs,locs2)) = [];
    locs = locs3;
    
    display(length(locs),'length locs after correction')
    
    % compute spectrogram on concatenated Lfp
    % Parameters spectrogram
    nFFT = 64;
    if T.depth(indDB)==1 & T.SingleShank(indDB)==0
        nFFT = 128;
    end
    if DownFact
        nFFT = nFFT/2;
    end
    sStruct = struct();
    pow=struct();
    WBact =  (out.(FreqBandLow{1}).W(iSelectICs,:) * LfpState')';
%     [wx,~] = WhitenSignal(WBact,[],[],[],1);
    [s,f,t] = mtcsglong(WBact,nFFT,FsHigh,nFFT);%,1024);

    nFFT=1024;
%     [ppxAC, fAC] = pwelch(WBact,nFFT,nFFT/2,nFFT,FsHigh);
%     figure()
%     loglog(fAC,ppxAC)
    
    display(t(2)-t(1),'Time resolution of spectrogram')
    TsSpec = t(2)-t(1);
    FsSpec = 1/(t(2)-t(1));

    sStruct.(['IC' num2str(iSelectICs)]) = s;
    AvSpec.f = f;
    sStruct.t = t;
    AvSpec.t = t;

    for iFreq = 1:length(FreqBandsHigh)%compute power for freq. bands of interest
        indFreq = find(f>=fB.(FreqBandsHigh{iFreq})(1) & f<=fB.(FreqBandsHigh{iFreq})(2));
       
        pow.(FreqBandsHigh{iFreq}) = sum(s(:,indFreq),2);
    end
    
        
    DeltaTvec = [-0.1,0,0.1];
    for iFreq  = 1:length(FreqBandsHigh)
        if iFreq == length(FreqBandsHigh)
            figure()
            title(['Power' FreqBandsHigh{iFreq}])
            hold on
            for DeltaT = DeltaTvec
                PowPeaksHist.(FreqBandsHigh{iFreq}) = pow.(FreqBandsHigh{iFreq})(floor((ICt(locs)+DeltaT)*FsSpec));            
                histogram(PowPeaksHist.(FreqBandsHigh{iFreq}),100)

                legend(['Time from peak = ' num2str(DeltaTvec(1)) 's'],['Time from peak = ' num2str(DeltaTvec(2)) 's'],['Time from peak = ' num2str(DeltaTvec(3)) 's'])
    %             if iFreq ==1
    %                 figure()
    %                 title(['IC activation ' '//time from peak' num2str(DeltaT) 's'])
    %                 hold on
    %               
    %                 FiltLfpState = ButFilter(WBact,2,10/(FsHigh)*2,'low');
    % 
    %                 histogram(FiltLfpState(floor((ICt(locs)+DeltaT)*FsHigh)),100)
    %                
    %                 legend(['Time from peak = ' num2str(DeltaTvec(1)) 's'],['Time from peak = ' num2str(DeltaTvec(2)) 's'],['Time from peak = ' num2str(DeltaTvec(3)) 's'])
    %             end
            end
        end
    end
      
    
    % use val of loaded ICs to compute spectrograms
    % compute triggered average of the power bands
    SampWidthIC = floor(Twindow*Fs);
    AvIC = zeros([length(-SampWidthIC:SampWidthIC),1]);
    for iE = 3:length(pks)
    %if all channels selected compute map metrics for videos
    % define samples for power spectrum corresponding IC activation peak
        SampsTriggerPower = floor(ICt(locs(iE))*FsSpec);
        display(iE)
        SampWidth = floor(Twindow*FsSpec);
        SampsWindow= [SampsTriggerPower-SampWidth:SampsTriggerPower+SampWidth];

        if (locs(iE)-SampWidthIC)<1
            continue
        end
        AvIC = AvIC + ICsig(locs(iE)-SampWidthIC:locs(iE)+SampWidthIC)';


        for iFreq= 1:length(FreqBandsHigh)
            if iE ==3
                AvPower.(FreqBandsHigh{iFreq}) = pow.(FreqBandsHigh{iFreq})(SampsWindow);
            else
                AvPower.(FreqBandsHigh{iFreq}) = AvPower.(FreqBandsHigh{iFreq}) + pow.(FreqBandsHigh{iFreq})(SampsWindow);%-repmat(pow.(FreqBandsHigh{iFreq})(SampsWindow(1),:),[length(pow.(FreqBandsHigh{iFreq})(SampsWindow(1),:)),1]);
            end
        end
       
        if iE ==3
            AvSpec.(['IC' num2str(iSelectICs)]) = sStruct.(['IC' num2str(iSelectICs)])(SampsWindow,:);
        else
            AvSpec.(['IC' num2str(iSelectICs)]) =  AvSpec.(['IC' num2str(iSelectICs)]) + sStruct.(['IC' num2str(iSelectICs)])(SampsWindow,:);
        end

    end
    for iFreq= 1:length(FreqBandsHigh)
        zeroedEvent = repmat(mean(AvPower.(FreqBandsHigh{iFreq})),[length(SampsWindow),1]);
        whiteningEvent = repmat(max(AvPower.(FreqBandsHigh{iFreq})-zeroedEvent),[length(SampsWindow),1]);
        AvPower.(FreqBandsHigh{iFreq}) = (AvPower.(FreqBandsHigh{iFreq})-zeroedEvent)./whiteningEvent;
    end
    
    zeroedEvent = repmat(mean(AvSpec.(['IC' num2str(iSelectICs)])),[length(sStruct.(['IC' num2str(iSelectICs)])(SampsWindow,1)),1]);
    whiteningEvent = repmat(max(abs(AvSpec.(['IC' num2str(iSelectICs)])-zeroedEvent)),[length(sStruct.(['IC' num2str(iSelectICs)])(SampsWindow,1)),1]);
    
    AvSpec.(['IC' num2str(iSelectICs)]) = (AvSpec.(['IC' num2str(iSelectICs)])-zeroedEvent)./whiteningEvent;
    
    AvIC = AvIC/length(pks);
    
    out.AvIC = AvIC;
    out.ICt = [-SampWidthIC:SampWidthIC]/Fs;
    out.AvPower = AvPower;
    out.PowerT = [-SampWidth:SampWidth]/FsSpec;
    
    fig = figure()
    ax1 = subplot(3,1,1);
    plot(out.ICt,AvIC)
    legend(['averaged IC' num2str(iSelectICs)])
    ax2 = subplot(3,1,2);
    indFreqSpec = find(AvSpec.f<=FMinSpec);
    imagesc(out.PowerT,AvSpec.f(indFreqSpec),AvSpec.(['IC' num2str(iSelectICs)])(:,indFreqSpec)')
%     colorbar
    title(['Av. Spec. IC' num2str(iSelectICs)])
    ax3 = subplot(3,1,3);
    hold on
    for iFreq = 1:length(FreqBandsHigh)
        PowTrace=out.AvPower.(FreqBandsHigh{iFreq});
        plot(out.PowerT,PowTrace,'DisplayName',FreqBandsHigh{iFreq})
    end
    linkaxes([ax1,ax2,ax3],'x')
    savefig(fig,[OutputPath 'IC' num2str(iSelectICs)
end




